plugins {
    id "java"
    id "maven" // install jar files to the local repo: $ gradle install
    id "checkstyle"
    id "findbugs"
    //id "jacoco"
}

group = 'com.fasterxml.jackson.datatype'
version = '0.1.0'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    provided
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile     'org.msgpack:msgpack-core:0.8.11'
    compile     'com.fasterxml.jackson.core:jackson-annotations:2.5.3'
    compile     'com.fasterxml.jackson.core:jackson-core:2.5.3'
    compile     'com.fasterxml.jackson.core:jackson-databind:2.5.3'
    compile     'com.google.guava:guava:18.0'
    compile     'com.google.code.findbugs:annotations:3.0.0'

    testCompile 'junit:junit:4.+'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

javadoc {
    options {
        locale = 'en_US'
        encoding = 'UTF-8'
    }
}

task classpath(type: Copy, dependsOn: ["jar"]) {
    doFirst { file('classpath').deleteDir() }
    from (configurations.runtime - configurations.provided + files(jar.archivePath))
    into 'classpath'
}
clean { delete 'classpath' }

// checkstyle
checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}

// findbugs
findbugs {
    ignoreFailures = true
}

// add tests/javadoc/source jar tasks as artifacts to be released
task testsJar(type: Jar, dependsOn: classes) {
    classifier = 'tests'
    from sourceSets.test.output
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
